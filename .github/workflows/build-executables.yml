name: Build Executables

on:
  push:
    branches: [ main, development, test-github-actions ]
  pull_request:
    branches: [ main, development, test-github-actions ]
  workflow_dispatch:

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies (Windows)
      run: |
        echo "Windows system ready for build"
      
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install PyQt6>=6.4.0
        pip install pandas>=1.5.0
        pip install numpy>=1.21.0
        pip install scipy>=1.9.0
        pip install librosa>=0.9.0
        pip install pyaudio>=0.2.11
        pip install sounddevice>=0.4.5
        pip install psutil>=5.9.0
        pip install watchdog>=2.1.9
        pip install scikit-learn
        pip install matplotlib
        pip install jupyter
        pip install pyinstaller>=5.0.0
    
    - name: Build Windows executable
      run: |
        pyinstaller --onefile --windowed `
          --name "Custom-Tests-Battery" `
          --add-data "task_cvc;task_cvc" `
          --add-data "task_stroop_colorword;task_stroop_colorword" `
          --add-data "task_reading_span;task_reading_span" `
          --add-data "task_speeded_classification;task_speeded_classification" `
          --add-data "task_auditory_stroop;task_auditory_stroop" `
          --add-data "crash_recovery_system;crash_recovery_system" `
          --add-data "*.txt;." `
          --add-data "*.csv;." `
          --hidden-import "crash_recovery_system.crash_handler" `
          --hidden-import "crash_recovery_system.session_manager" `
          --hidden-import "crash_recovery_system.task_state_saver" `
          --hidden-import "task_cvc.data_saver" `
          --hidden-import "task_stroop_colorword.data_saver" `
          --hidden-import "task_reading_span.data_saver" `
          --hidden-import "task_speeded_classification.data_saver" `
          --hidden-import "task_auditory_stroop.data_saver" `
          --hidden-import "pyaudio" `
          --hidden-import "sounddevice" `
          --hidden-import "librosa" `
          --hidden-import "sklearn" `
          --collect-all "librosa" `
          --collect-all "sklearn" `
          welcome.py
    
    - name: Verify executable was created
      run: |
        if (Test-Path "dist/Custom-Tests-Battery.exe") {
          Write-Host "Executable created successfully"
          Get-Item "dist/Custom-Tests-Battery.exe" | Select-Object Name, Length, LastWriteTime
        } else {
          Write-Host "Error: Executable not found"
          exit 1
        }
    
    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-executable
        path: dist/Custom-Tests-Battery.exe
        retention-days: 30

  build-macos:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies (macOS)
      run: |
        brew install portaudio pkg-config
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install PyQt6>=6.4.0
        pip install pandas>=1.5.0
        pip install numpy>=1.21.0
        pip install scipy>=1.9.0
        pip install librosa>=0.9.0
        pip install pyaudio>=0.2.11
        pip install sounddevice>=0.4.5
        pip install psutil>=5.9.0
        pip install watchdog>=2.1.9
        pip install scikit-learn
        pip install matplotlib
        pip install jupyter
        pip install py2app>=0.28.0
    
    - name: Create setup.py for py2app
      run: |
        cat > setup.py << 'EOF'
        from setuptools import setup
        import py2app
        
        APP = ['welcome.py']
        DATA_FILES = []
        OPTIONS = {
            'argv_emulation': True,
            'packages': [
                'crash_recovery_system',
                'task_cvc',
                'task_stroop_colorword', 
                'task_reading_span',
                'task_speeded_classification',
                'task_auditory_stroop'
            ],
            'includes': [
                'PyQt6.QtCore',
                'PyQt6.QtGui', 
                'PyQt6.QtWidgets',
                'pandas',
                'numpy',
                'scipy',
                'librosa',
                'sklearn'
            ],
            'excludes': [
                'tkinter',
                'PyInstaller',
                'numba',
                'llvmlite', 
                'test',
                'tests',
                'numpy.tests',
                'scipy.tests',
                'pandas.tests',
                'sklearn.tests'
            ],
            'resources': [
                'task_cvc', 
                'task_stroop_colorword',
                'task_reading_span', 
                'task_speeded_classification',
                'task_auditory_stroop',
                'crash_recovery_system'
            ],
        }
        
        setup(
            app=APP,
            data_files=DATA_FILES,
            options={'py2app': OPTIONS},
            setup_requires=['py2app'],
            name='Custom Tests Battery',
        )
        EOF
    
    - name: Build macOS app bundle
      run: |
        python setup.py py2app
    
    - name: Create DMG
      run: |
        if ! command -v create-dmg &> /dev/null; then
          brew install create-dmg
        fi
        
        # Verify app bundle contents before creating DMG
        echo "Verifying app bundle contents..."
        if [ -d "dist/Custom Tests Battery.app" ]; then
          echo "App bundle created successfully"
          
          echo "Checking for audio files in app bundle:"
          find "dist/Custom Tests Battery.app" -name "*.wav" -type f | while read file; do
            echo "  Found: $file"
          done
          
          echo "Checking for data files in app bundle:"
          find "dist/Custom Tests Battery.app" -name "*.txt" -o -name "*.csv" -type f | while read file; do
            echo "  Found: $file"
          done
          
          echo "Verifying task folders in app bundle:"
          for task_dir in "task_cvc" "task_stroop_colorword" "task_reading_span" "task_speeded_classification" "task_auditory_stroop"; do
            if [ -d "dist/Custom Tests Battery.app/Contents/Resources/$task_dir" ]; then
              echo "  ✓ $task_dir folder found"
            else
              echo "  ✗ $task_dir folder missing!"
            fi
          done
        else
          echo "Error: App bundle not found!"
          exit 1
        fi
        
        create-dmg \
          --volname "Custom Tests Battery" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "Custom Tests Battery.app" 200 190 \
          --hide-extension "Custom Tests Battery.app" \
          --app-drop-link 600 185 \
          "dist/Custom-Tests-Battery.dmg" \
          "dist/"
    
    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: macos-dmg
        path: dist/Custom-Tests-Battery.dmg
        retention-days: 30

  create-release-comment:
    runs-on: ubuntu-latest
    needs: [build-windows, build-macos]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/development' || github.ref == 'refs/heads/test-github-actions')
    
    steps:
    - name: Create release comment
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
            owner: context.repo.owner,
            repo: context.repo.repo,
            run_id: context.runId,
          });
          
          const windowsArtifact = artifacts.artifacts.find(a => a.name === 'windows-executable');
          const macosArtifact = artifacts.artifacts.find(a => a.name === 'macos-dmg');
          
          const comment = `**Development Build Ready!**
          
          New executables have been built from the latest ${github.ref.replace('refs/heads/', '')} branch:
          
          **Downloads:**
          - [Windows (.exe)](${windowsArtifact?.archive_download_url || 'Building...'})
          - [macOS (.dmg)](${macosArtifact?.archive_download_url || 'Building...'})
          
          **For Team Testing:**
          1. Download the appropriate file for your OS
          2. Extract if necessary (GitHub downloads as .zip)
          3. Run the executable to test the latest changes
          
          **Build Info:**
          - Python Version: 3.12
          - Commit: ${context.sha.substring(0, 7)}
          - Branch: ${github.ref.replace('refs/heads/', '')}
          - Build: ${context.runId}
          
          _Note: Artifacts expire after 30 days_`;
          
          if (context.eventName === 'pull_request') {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }