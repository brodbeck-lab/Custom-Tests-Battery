name: Nightly Development Builds

on:
  schedule:
    # Run every night at 2 AM UTC (if there were changes)
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.changes.outputs.should_build }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
    
    - name: Check for recent changes
      id: changes
      run: |
        # Check if there were commits in the last 24 hours
        if git log --since="24 hours ago" --oneline | grep -q .; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "Recent changes detected, will build"
        else
          echo "should_build=false" >> $GITHUB_OUTPUT
          echo "No recent changes, skipping build"
        fi

  build:
    needs: check-changes
    if: needs.check-changes.outputs.should_build == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            name: Windows
            executable: Custom-Tests-Battery.exe
            artifact: windows-nightly
          - os: macos-latest
            name: macOS
            executable: Custom-Tests-Battery.dmg
            artifact: macos-nightly
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Windows system ready for nightly build"
      
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio pkg-config
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install PyQt6>=6.4.0
        pip install pandas>=1.5.0
        pip install numpy>=1.21.0
        pip install scipy>=1.9.0
        pip install librosa>=0.9.0
        pip install pyaudio>=0.2.11
        pip install sounddevice>=0.4.5
        pip install psutil>=5.9.0
        pip install watchdog>=2.1.9
        pip install scikit-learn
        pip install matplotlib
        pip install jupyter
        
    - name: Install build tools (Windows)
      if: matrix.os == 'windows-latest'
      run: pip install pyinstaller>=5.0.0
      
    - name: Install build tools (macOS)
      if: matrix.os == 'macos-latest'
      run: pip install py2app>=0.28.0
    
    - name: Build Windows executable
      if: matrix.os == 'windows-latest'
      run: |
        pyinstaller --onefile --windowed `
          --name "Custom-Tests-Battery" `
          --add-data "task_cvc;task_cvc" `
          --add-data "task_stroop_colorword;task_stroop_colorword" `
          --add-data "task_reading_span;task_reading_span" `
          --add-data "task_speeded_classification;task_speeded_classification" `
          --add-data "task_auditory_stroop;task_auditory_stroop" `
          --add-data "crash_recovery_system;crash_recovery_system" `
          --add-data "*.txt;." `
          --add-data "*.csv;." `
          --hidden-import "crash_recovery_system.crash_handler" `
          --hidden-import "crash_recovery_system.session_manager" `
          --hidden-import "crash_recovery_system.task_state_saver" `
          --hidden-import "task_cvc.data_saver" `
          --hidden-import "task_stroop_colorword.data_saver" `
          --hidden-import "task_reading_span.data_saver" `
          --hidden-import "task_speeded_classification.data_saver" `
          --hidden-import "task_auditory_stroop.data_saver" `
          --hidden-import "pyaudio" `
          --hidden-import "sounddevice" `
          --hidden-import "librosa" `
          --hidden-import "sklearn" `
          --collect-all "librosa" `
          --collect-all "sklearn" `
          welcome.py
    
    - name: Build macOS executable
      if: matrix.os == 'macos-latest'
      run: |
        cat > setup.py << 'EOF'
        from setuptools import setup
        import py2app
        
        APP = ['welcome.py']
        DATA_FILES = []
        OPTIONS = {
            'argv_emulation': True,
            'packages': [
                'crash_recovery_system',
                'task_cvc',
                'task_stroop_colorword', 
                'task_reading_span',
                'task_speeded_classification',
                'task_auditory_stroop'
            ],
            'includes': [
                'PyQt6.QtCore',
                'PyQt6.QtGui', 
                'PyQt6.QtWidgets',
                'pandas',
                'numpy',
                'scipy',
                'librosa',
                'sklearn'
            ],
            'excludes': [
                'tkinter',
                'PyInstaller',
                'numba',
                'llvmlite', 
                'test',
                'tests',
                'numpy.tests',
                'scipy.tests',
                'pandas.tests',
                'sklearn.tests'
            ],
            'resources': [
                'task_cvc', 
                'task_stroop_colorword',
                'task_reading_span', 
                'task_speeded_classification',
                'task_auditory_stroop',
                'crash_recovery_system'
            ],
            'plist': {
                'CFBundleName': 'Custom Tests Battery Nightly',
                'CFBundleDisplayName': 'Custom Tests Battery Nightly',
                'CFBundleIdentifier': 'com.behavioralresearch.customtestsbattery.nightly',
                'CFBundleVersion': '2.0.0-nightly',
                'NSMicrophoneUsageDescription': 'This application records audio for cognitive testing and reaction time analysis.',
                'NSHighResolutionCapable': True
            }
        }
        
        setup(
            app=APP,
            data_files=DATA_FILES,
            options={'py2app': OPTIONS},
            setup_requires=['py2app'],
            name='Custom Tests Battery',
        )
        EOF
        
        python setup.py py2app
        
        if ! command -v create-dmg &> /dev/null; then
          brew install create-dmg
        fi
        
        create-dmg \
          --volname "Custom Tests Battery Nightly" \
          --window-pos 200 120 \
          --window-size 800 400 \
          --icon-size 100 \
          --icon "Custom Tests Battery.app" 200 190 \
          --hide-extension "Custom Tests Battery.app" \
          --app-drop-link 600 185 \
          "dist/Custom-Tests-Battery.dmg" \
          "dist/"
    
    - name: Upload nightly build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: dist/${{ matrix.executable }}
        retention-days: 7  # Shorter retention for nightly builds

  create-nightly-summary:
    runs-on: ubuntu-latest
    needs: build
    if: always() && needs.check-changes.outputs.should_build == 'true'
    
    steps:
    - name: Create nightly build summary
      uses: actions/github-script@v7
      with:
        script: |
          const buildStatus = '${{ needs.build.result }}';
          const timestamp = new Date().toISOString().split('T')[0];
          
          const summary = `**Nightly Build Summary - ${timestamp}**
          
          **Build Status:** ${buildStatus === 'success' ? '✅ Success' : '❌ Failed'}
          
          **Build Details:**
          - Python Version: 3.12
          - Commit: ${context.sha.substring(0, 7)}
          - Branch: ${context.ref.replace('refs/heads/', '')}
          - Workflow Run: [#${context.runNumber}](${context.payload.repository.html_url}/actions/runs/${context.runId})
          
          ${buildStatus === 'success' ? 
            '**Available Downloads:**\n- Windows executable (7-day retention)\n- macOS DMG (7-day retention)\n\nAccess artifacts from the workflow run page.' :
            '**Failed Build:** Check the workflow logs for details.'}
          
          _Nightly builds are automatically triggered when changes are detected._`;
          
          console.log(summary);